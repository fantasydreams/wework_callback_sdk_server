#include <iostream>
#include <string>
#include "WXBizJsonMsgCrypt.h"

using namespace Tencent;
using namespace std;

/*
*read me
*本示例代码应用了开源的openssl和rapidJson库，均编译成32位和64位的静态依赖库,
*示例Makefile里面依赖的是64位版本的，若测试机型为32位，请改Makefile的依赖

*openssl的版本号是openssl-1.0.1h，http://www.openssl.org/
*rapidjson的版本号是rapidjson v1.1.0,    https://github.com/Tencent/rapidjson/releases/tag/v1.1, pure headers
*/

int main()
{
	// 假设企业在企业微信后台设置的参数如下
	string sToken = "QDG6eK";
	string sCorpID = "wx5823bf96d3bd56c7";
	string sEncodingAESKey = "jWmYm7qr5nMoAUwZRjGtBxmz3KA1tkAj3ykkR6q2B2C";	

	/*
	------------使用示例一：验证回调URL---------------
	*企业开启回调模式时，企业微信会向验证url发送一个get请求 
	假设点击验证时，企业收到类似请求：
	* GET /cgi-bin/wxpush?msg_signature=5c45ff5e21c57e6ad56bac8758b79b1d9ac89fd3&timestamp=1409659589&nonce=263014780&echostr=P9nAzCzyDtyTWESHep1vC5X9xho%2FqYX3Zpb4yKa9SKld1DsH3Iyt3tP3zNdtp%2B4RPcs8TgAE7OaBO%2BFZXvnaqQ%3D%3D 
	* HTTP/1.1 Host: qy.weixin.qq.com

	接收到该请求时，企业应	1.解析出Get请求的参数，包括消息体签名(msg_signature)，时间戳(timestamp)，随机数字串(nonce)以及企业微信推送过来的随机加密字符串(echostr),
	这一步注意作URL解码。
	2.验证消息体签名的正确性 
	3. 解密出echostr原文，将原文当作Get请求的response，返回给企业微信
	第2，3步可以用企业微信提供的库函数VerifyURL来实现。
	*/
    WXBizJsonMsgCrypt wxcpt(sToken,sEncodingAESKey,sCorpID);
	// string sVerifyMsgSig = HttpUtils.ParseUrl("msg_signature");
	string sVerifyMsgSig = "5c45ff5e21c57e6ad56bac8758b79b1d9ac89fd3";
	// string sVerifyTimeStamp = HttpUtils.ParseUrl("timestamp");
	string sVerifyTimeStamp = "1409659589";
	// string sVerifyNonce = HttpUtils.ParseUrl("nonce");
	string sVerifyNonce = "263014780";
	// string sVerifyEchoStr = HttpUtils.ParseUrl("echostr");
	string sVerifyEchoStr = "P9nAzCzyDtyTWESHep1vC5X9xho/qYX3Zpb4yKa9SKld1DsH3Iyt3tP3zNdtp+4RPcs8TgAE7OaBO+FZXvnaqQ==";
	int ret = 0;
	// 需要返回的明文
	string sEchoStr;
	ret = wxcpt.VerifyURL(sVerifyMsgSig, sVerifyTimeStamp, sVerifyNonce, sVerifyEchoStr, sEchoStr);
	if( ret!=0 )
	{
		cout<<"ERR: VerifyURL ret: "<< ret << endl;
		return ret;
	}
	// ret==0 表示验证URL成功，需要将sEchoStr返回给企业微信
	// HttpUtils.SetResponse( sEchoStr );
	

	/*
	------------使用示例二：对用户回复的消息解密---------------
	用户回复消息或者点击事件响应时，企业会收到回调消息，此消息是经过企业微信加密之后的密文以post形式发送给企业，密文格式请参考官方文档
	假设企业收到企业微信的回调消息如下：
	POST /cgi-bin/wxpush? msg_signature=477715d11cdb4164915debcba66cb864d751f3e6&timestamp=1409659813&nonce=1372623149 HTTP/1.1
	Host: qy.weixin.qq.com
	Content-Length:
	Content-Type:text/json
	{
		"tousername":"wx5823bf96d3bd56c7",
		"encrypt":"No8isRLoXqFMhLlpe7R/DA7UbJ88DKJxDhJH/UVG3o1ib0Fhzdd3qWYHH/KL1mITv5qOCp2FbyILqfI7zazrp/ARgSHR177OCrv8O9UrMHWdnOaMXaz+mLd5X5VWm5r2J3Qpm+NdTQRPhHbce88frKF3wqTaZunKW7ae87bRZUfaq5tLFnyTsf6aiy0su3SsQ06dQGKPcHfYHY3upB881008Q9t9xeAZ/uqfXpYQgSLQfaX+fk/K/FQEl4QpLk94eD1YjluFY3uLnKp40zDyxgeWRAmgTtmx1eLwediVqZ8=",
		"agentid":218
	}

	企业收到post请求之后应该	1.解析出url上的参数，包括消息体签名(msg_signature)，时间戳(timestamp)以及随机数字串(nonce)
	2.验证消息体签名的正确性。	3.将post请求的数据进行json解析，并将"encrypt"标签的内容进行解密，解密出来的明文即是用户回复消息的明文，明文格式请参考官方文档
	第2，3步可以用企业微信提供的库函数DecryptMsg来实现。
	*/
	
	// string sReqMsgSig = HttpUtils.ParseUrl("msg_signature");
	string sReqMsgSig = "0a33ac8596e2271d03eded037d04383a28e6f133";
	// string sReqTimeStamp = HttpUtils.ParseUrl("timestamp");
	string sReqTimeStamp = "1409659813";
	// string sReqNonce = HttpUtils.ParseUrl("nonce");
	string sReqNonce = "1372623149";
	// post请求的密文数据
	string sReqData = "{\"tousername\":\"wx5823bf96d3bd56c7\",\"encrypt\":\"No8isRLoXqFMhLlpe7R/DA7UbJ88DKJxDhJH/UVG3o1ib0Fhzdd3qWYHH/KL1mITv5qOCp2FbyILqfI7zazrp/ARgSHR177OCrv8O9UrMHWdnOaMXaz+mLd5X5VWm5r2J3Qpm+NdTQRPhHbce88frKF3wqTaZunKW7ae87bRZUfaq5tLFnyTsf6aiy0su3SsQ06dQGKPcHfYHY3upB881008Q9t9xeAZ/uqfXpYQgSLQfaX+fk/K/FQEl4QpLk94eD1YjluFY3uLnKp40zDyxgeWRAmgTtmx1eLwediVqZ8=\",\"agentid\":\"218\"}";
	string sMsg;  // 解密之后的明文
	ret = wxcpt.DecryptMsg(sReqMsgSig, sReqTimeStamp, sReqNonce, sReqData, sMsg);
	if( ret!=0 )
	{
		cout << "ERR: DecryptMsg ret: " << ret << endl;
		return ret;
	}

	// 解密成功，sMsg即为json格式的明文
	// TODO: 对明文的处理
	// For example:
	string content;

	//除了提供从json中解析得到string类型的value外，本sdk还提供了uint_32和uint64_t类型的接口，
	//用户也可将密文经过DecryptMsg处理得到消息明文后，直接是用rapaidjson提供的接口提取域值，如果对同一json多轮提取值，建议直接使用rapaidjson接口
	if( 0!= wxcpt.GetJsonField(sMsg, "Content", content) )
    {
		cout<<"Post data Format ERR"<<endl;
        return WXBizMsgCrypt_ParseJson_Error;
    }
	cout<<"content: "<<content<<endl;

	uint32_t timeStamp = 0;
	if( 0!= wxcpt.GetJsonField(sMsg, "CreateTime", timeStamp) )
    {
		cout<<"Post data Format ERR"<<endl;
        return WXBizMsgCrypt_ParseJson_Error;
    }
	cout<<"timestamp: "<<timeStamp<<endl;

	uint64_t msgId = 0;
	if( 0!= wxcpt.GetJsonField(sMsg, "MsgId", msgId) )
    {
		cout<<"Post data Format ERR"<<endl;
        return WXBizMsgCrypt_ParseJson_Error;
    }
	cout<<"MsgId: "<<msgId<<endl;
	// ...
	// ...
	// ...
	
	
	/*
	------------使用示例三：企业回复用户消息的加密---------------
	企业被动回复用户的消息也需要进行加密，并且拼接成密文格式的json串。
	假设企业需要回复用户的明文如下：

	{ 
		"ToUserName": "mycreate",
		"FromUserName":"wx5823bf96d3bd56c7",
		"CreateTime": 1348831860,
		"MsgType": "text",
		"Content": "this is a test",
		"MsgId": 1234567890123456,
		"AgentID": 128
    }

	为了将此段明文回复给用户，企业应：	1.自己生成时间时间戳(timestamp),随机数字串(nonce)以便生成消息体签名，也可以直接用从企业微信的post url上解析出的对应值。
	2.将明文加密得到密文。
	3.用密文，步骤1生成的timestamp,nonce和企业在企业微信设定的token生成消息体签名。
	4.将密文，消息体签名，时间戳，随机数字串拼接成json格式的字符串，发送给企业号。
	以上2，3，4步可以用企业微信提供的库函数EncryptMsg来实现。
	*/
	//需要发送的明文为sRespData
	string sRespData = "{\"ToUserName\":\"wx5823bf96d3bd56c7\",\"FromUserName\":\"mycreate\",\"CreateTime\": 1409659813,\"MsgType\":\"text\",\"Content\":\"hello\",\"MsgId\":4561255354251345929,\"AgentID\": 218}";
	string sEncryptMsg; 
	ret = wxcpt.EncryptMsg(sRespData, sReqTimeStamp, sReqNonce, sEncryptMsg);
	if( ret!=0 )
	{
		cout<<"ERR: EncryptMsg ret: "<<ret<<endl;
		return ret;
	}
	//TODO:
	// ret==0表示加密成功，企业需要将sEncryptMsg返回
	// HttpUtils.SetResponse(sEncryptMsg);
	cout<<sEncryptMsg<<endl;

    return 0;
}
